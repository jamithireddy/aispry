### End of Session ###
rm(list=ls())
data <- read.csv(file.choose())# Load the mtcars_dup dataset for EDA_Dataset
apply(data, 2, var)
data <- read.csv(file.choose())# Load the Ethnic Diversity dataset for EDA_Dataset
apply(data, 2, var)
apply(data, 2, var)   #Calculate variance on every row for the dataset
which(apply(data,2,var)==0)
### End of Session ###
rm(list=ls())
### Missing Values - Imputation ###
data <- read.csv(file.choose())# Load the Modified Ethnic dataset for EDA_Dataset
sum(is.na(data))
sum(is.na(data))# Returns the count of the rows with missing values
summary(data)
data_new <- na.omit(data)
dim(data)
boxplot(data$Salaries)
boxplot(data$Salaries)$out
data$Salaries[is.na(data$Salaries)] <- mean(data$Salaries, na.rm = TRUE)
sum(is.na(data$Salaries))
data$age[is.na(data$age)]<- mean(data$age,na.rm = TRUE)
data$Race <- as.factor(data$Race)
summary(data$Race)
str(data)
modes <- function(x){
ux <- unique(x)  # Grabs the unique values in x and creates a tuple named ux
tab <- tabulate(match(x,ux))  # Creates a table how many times the the individual variable appears in x
ux[tab==max(tab)] # Displays the items with max times of repeating based on index.
}
# Imputing mode to the missing values
data$Race[is.na(data$Race)] <-modes(na.omit(data$Race)
# Imputing mode to the missing values
data$Race[is.na(data$Race)] <-modes(na.omit(data$Race))
data$Race[is.na(data$Race)] <-modes(na.omit(data$Race))
sum(is.na(data$Race))
summary(data$Race)
install.packages(c("brew", "pillar", "quantreg", "readr", "rlang", "sf", "svglite", "tidyr", "units"))
a= table(data$Race)
view a
b= table(data$Position)
b
star(data$Position)
str(data$Position)
rm a
rm.a
rm(a)
max(a)
max(b)
which.max(b)
a[which.max(b)]
b[which.max(b)]
names(b[which.max(b)])
Moder <-function(x){
a=table(x)
names(a[which.max(a)])
}
data$Position[is.na(data$Position)]<-Moder(na.omit(data$Position))
summary(data$Position)
sum(is.na(data$Position))
data$Position < -as.factor(data$Position)
View(data)
View(data)
data$Position <- as.factor(data$Position)
View(data)
summary(data$Position)
data$Department <- as.factor(data$Department)
data$Department[is.na(data$Position)]<- Moder(na.omit(data$Department))
View(data)
sum(is.na(data$Department))
data$Department[is.na(data$Position)] <- Moder(na.omit(data$Department))
sum(is.na(data$Department))
na.omit(data$Department)
Moder(na.omit(data$Department))
data <- read.csv(file.choose())# Load the Modified Ethnic dataset for EDA_Dataset
sum(is.na(data))# Returns the count of the missing values
summary(data) # Shows the Count of missing values for the numerical columns
data_new <- na.omit(data) # This removes the entire row of the dataset where there is even a single NA value
## Imputation techniques ##
boxplot(data$Salaries)$out # Getting the outlier data
# Mean Imputation #
# Calculating mean after removing NA values and assigning it to the index values of the column where value is NA
data$Salaries[is.na(data$Salaries)] <- mean(data$Salaries, na.rm = TRUE)
sum(is.na(data$Salaries)) # Checking if there are any NA values in the column
data$age[is.na(data$age)]<- mean(data$age,na.rm = TRUE)
# Mode imputation #
# Mode imputation is done primarily in categorical data. We convert the categorical data into factor first
data$Race <- as.factor(data$Race)
summary(data$Race)
# creating a function calculate mode
modes <- function(x){
ux <- unique(x)  # Grabs the unique values in x and creates a tuple named ux
tab <- tabulate(match(x,ux))  # Creates a table how many times the the individual variable appears in x
ux[tab==max(tab)] # Displays the items with max times of repeating based on index.
}
# Imputing mode to the missing values
data$Race[is.na(data$Race)] <-modes(na.omit(data$Race))
sum(is.na(data$Race))
summary(data$Race)
# Another way to Calculate Mode
Moder <-function(x){
a=table(x)
names(a[which.max(a)])
}
data$Position[is.na(data$Position)]<-Moder(na.omit(data$Position))
data$Position <- as.factor(data$Position)
summary(data$Position)
data$Department <- as.factor(data$Department)
data$Department[is.na(data$Department)] <- Moder(na.omit(data$Department))
sum(is.na(data$Department))
View(data)
# Imputing all other Categorical columns in single go
data_rest <- data[,-(1,8,9,10)]
# Imputing all other Categorical columns in single go
data_rest <- data[,-c(1,8,9,10)]
data_tran <- as.data.frame(apply(data_rest, 2, Moder))
View(data_tran)
data_tran
### End of Session ###
rm(list=ls())
